import{r as s,t as v}from"./app-BdUgStYA.js";import{b as E}from"./index-ByH28Q-n.js";var b=v[" useInsertionEffect ".trim().toString()]||E;function C({prop:t,defaultProp:u,onChange:o=()=>{},caller:i}){const[l,e,n]=w({defaultProp:u,onChange:o}),r=t!==void 0,a=r?t:l;{const c=s.useRef(t!==void 0);s.useEffect(()=>{const f=c.current;f!==r&&console.warn(`${i} is changing from ${f?"controlled":"uncontrolled"} to ${r?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),c.current=r},[r,i])}const m=s.useCallback(c=>{var f;if(r){const d=S(c)?c(t):c;d!==t&&((f=n.current)==null||f.call(n,d))}else e(c)},[r,t,e,n]);return[a,m]}function w({defaultProp:t,onChange:u}){const[o,i]=s.useState(t),l=s.useRef(o),e=s.useRef(u);return b(()=>{e.current=u},[u]),s.useEffect(()=>{var n;l.current!==o&&((n=e.current)==null||n.call(e,o),l.current=o)},[o,l]),[o,i,e]}function S(t){return typeof t=="function"}export{C as u};
